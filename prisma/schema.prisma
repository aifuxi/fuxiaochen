// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// 使用 mysql 作为数据库
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  // 管理员
  ADMIN
  // 普通用户
  USER
}

model User {
  name     String  @unique
  password String
  email    String  @unique
  image    String?
  role     Role    @default(USER)
  banned   Boolean @default(false)

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  name        String    @unique
  slug        String    @unique
  description String
  blogs       Blog[]
  snippets    Snippet[]
  notes       Note[]
  icon        String?   @db.Text
  iconDark    String?   @db.Text

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  name        String    @unique
  slug        String    @unique
  description String
  blogs       Blog[]
  snippets    Snippet[]
  notes       Note[]
  icon        String?   @db.Text
  iconDark    String?   @db.Text

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  title       String  @unique
  slug        String  @unique
  description String
  body        String  @db.Text
  cover       String?
  published   Boolean @default(false)
  tags        Tag[]

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Snippet {
  title       String  @unique
  slug        String  @unique
  description String
  body        String  @db.Text
  published   Boolean @default(false)
  tags        Tag[]

  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}

model Note {
  body      String  @db.Text
  published Boolean @default(false)
  tags      Tag[]

  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}
